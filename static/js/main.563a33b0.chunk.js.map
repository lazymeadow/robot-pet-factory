{"version":3,"sources":["components/game/workers.js","services/upgrades/data.js","services/upgrades/service.js","components/game/GameWrapper.js","components/overview/Overview.js","components/TwoPanel.js","components/Tabs.js","components/factory/Factory.js","components/kennel/Kennel.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Worker","name","description","duration","clickQuantity","cost","this","id","workerCount","toString","padStart","count","addWorker","worker1","unlockableWorkers","factory","types","typeNames","singular","plural","getBaseName","type","charAt","toUpperCase","slice","length","getBaseDesc","price","getQuantityDesc","quantity","level","Math","pow","getQualityDesc","multiplier","getQuantityName","getQualityName","factoryPartUpgrades","unlock","incrementer","upgradeDependencies","quality","findUpgradeById","Object","entries","partType","foundInQuantity","find","upgrade","foundInQuality","getUpgradeForDisplayById","isUpgradeAcquired","acquiredUpgrades","upgradeToFind","findIndex","upgradeId","isUpgradeAvailable","upgradeToCheck","hasOwnProperty","reduce","isVisible","dependencyId","getFactoryDefault","GameContext","createContext","actionTypes","saveState","state","stateToSave","localStorage","setItem","JSON","stringify","loadState","loadedState","parse","getItem","totalClicks","totalCoins","lifetimeCoins","workers","upgrades","gameReducer","action","newState","numCoinsToAdd","gameState","mathsMap","forEach","maxLevel","runningTotal","getSingleClickIncrement","addedCoins","payload","coins","item","foundWorker","worker","workerToAdd","GameWrapper","children","useReducer","dispatch","Provider","value","recordClick","addCoins","buyUpgrade","buyWorker","getAvailableUpgrades","upgradesToReturn","upgradesToAdd","concat","filter","map","push","categoryName","getAvailableUpgradesForDisplay","getAcquiredUpgrades","getAvailableWorkers","canSeeWorkers","resetGame","Overview","ViewContext","Consumer","showFactory","showKennel","className","onClick","TwoPanel","tabsContent","mainContent","TabContext","Tabs","defaultTabKey","useState","currentTab","setCurrentTab","isCurrentTab","tabKey","TabsContainer","Tab","role","TabContent","Factory","availableUpgrades","availableWorkers","extraClass","helperText","purchased","src","alt","Kennel","Header","isCurrentViewFactory","isCurrentViewKennel","isCurrentViewOverview","showOverview","views","App","viewContent","currentView","setCurrentView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.563a33b0.chunk.js","sourcesContent":["// import {canSeeWorkers} from './upgrades';\r\n\r\n\r\nconst intervalIds = [];\r\nexport const updateIntervals = (state, incrementHandler) => {\r\n\t// first clean up all the existing intervals\r\n\tintervalIds.forEach(intervalId => window.clearInterval(intervalId));\r\n\tintervalIds.splice(0);\r\n\t// then go make new intervals for the items that already exist.\r\n\t// map the intervals by duration\r\n\tconst intervalMap = {};\r\n\tstate.workers.forEach(worker => {\r\n\t\tif (!intervalMap.hasOwnProperty(worker.duration)) {\r\n\t\t\tintervalMap[worker.duration] = [];\r\n\t\t}\r\n\t\tintervalMap[worker.duration].push(worker);\r\n\t});\r\n\tfor (const [duration, values] of Object.entries(intervalMap)) {\r\n\t\tintervalIds.push(\r\n\t\t\twindow.setInterval(() => {\r\n\t\t\t\t\tincrementHandler(values.reduce((acc, value) => acc + (value.clickQuantity * value.count), 0));\r\n\t\t\t\t},\r\n\t\t\t\tduration\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n};\r\n\r\nclass Worker {\r\n\tstatic workerCount = 0;\r\n\r\n\tconstructor (name, description, duration, clickQuantity, cost) {\r\n\t\tthis.id = (Worker.workerCount++).toString().padStart(8, '0');\r\n\t\tthis.name = name;\r\n\t\tthis.description = description;\r\n\t\tthis.duration = duration;\r\n\t\tthis.clickQuantity = clickQuantity;\r\n\t\tthis.cost = cost;\r\n\t\tthis.count = 0;\r\n\t\tthis.addWorker = () => this.count++;\r\n\t}\r\n\r\n\t// isVisible = (state) => canSeeWorkers(state);\r\n}\r\n\r\nconst worker1 = new Worker(\r\n\t'Mouse Droid',\r\n\t'They don\\'t do much, but they can make 1 wire every 3 seconds. How? You don\\'t wanna know.',\r\n\t3000,\r\n\t1,\r\n\t25\r\n);\r\n\r\nexport const getWorkerById = (type, id) => unlockableWorkers[type].find(worker => worker.id === id);\r\n\r\nexport const unlockableWorkers = {\r\n\tfactory: [\r\n\t\tworker1\r\n\t]\r\n};\r\n\r\nexport const loadWorkers = (type, workerMap) => {\r\n\tconst workers = unlockableWorkers[type].filter(worker => Object.keys(workerMap).includes(worker.id));\r\n\tworkers.forEach(worker => worker.count = workerMap[worker.id]);\r\n\treturn workers;\r\n};","const types = {\r\n\tpart1: 'PART_1',\r\n\tpart2: 'PART_2',\r\n}\r\n\r\nconst typeNames = {\r\n\t[types.part1]: {\r\n\t\tsingular: 'wire',\r\n\t\tplural: 'wires'\r\n\t},\r\n\t[types.part2]: {\r\n\t\tsingular: 'screw',\r\n\t\tplural: 'screws'\r\n\t}\r\n};\r\n\r\n// wow\r\nexport const getBaseName = (type) => typeNames[type].plural.charAt(0).toUpperCase() + typeNames[type].plural.slice(1, typeNames[type].plural.length);\r\nexport const getBaseDesc = (type, price) => `Every click makes 1 ${typeNames[type].singular}, worth ${price} C.`;\r\nexport const getQuantityDesc = (type, quantity, level) => {\r\n\tif (level === 3) {\r\n\t\treturn `You make so many ${typeNames[type].plural}, ${quantity * Math.pow(2, level)} per click.`;\r\n\t}\r\n\treturn `Every click makes ${quantity * Math.pow(2, level)} ${quantity > 1 ? typeNames[type].singular : typeNames[type].plural}.`;\r\n}\r\nexport const getQualityDesc = (type, multiplier, price, level) => {\r\n\tif (level === 1) {\r\n\t\treturn `Your ${typeNames[type].plural} are better, and are worth ${price * Math.pow(multiplier, 2)} C each`;\r\n\t}\r\n\tif (level === 2) {\r\n\t\treturn `Your ${typeNames[type].plural} are even better, and are worth ${price * Math.pow(multiplier, 3)} C each`;\r\n\t}\r\n\tif (level === 3) {\r\n\t\treturn `You make the best possible ${typeNames[type].plural}, and are worth ${price * Math.pow(multiplier, 4)} C each`;\r\n\t}\r\n}\r\n\r\nexport const getQuantityName = (type, level) => {\r\n\tif (level === 1) {\r\n\t\treturn `More ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level === 2) {\r\n\t\treturn `Even more ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level ===3) {\r\n\t\treturn `So many ${typeNames[type].plural}`;\r\n\t}\r\n}\r\nexport const getQualityName = (type, level) => {\r\n\tif (level === 1) {\r\n\t\treturn `Better ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level === 2) {\r\n\t\treturn `Even better ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level ===3) {\r\n\t\treturn `The best ${typeNames[type].plural}`;\r\n\t}\r\n}\r\n\r\nexport const factoryPartUpgrades = {\r\n\t[types.part1]: {\r\n\t\tunlock: {\r\n\t\t\tid: 'w_base_0',\r\n\t\t\tcost: 0,\r\n\t\t\tincrementer: 1,\r\n\t\t\tmultiplier: 2\r\n\t\t},\r\n\t\tquantity: [\r\n\t\t\t{\r\n\t\t\t\tid: 'w_quant_0',\r\n\t\t\t\tcost: 100,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_quant_1',\r\n\t\t\t\tcost: 200,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_quant_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_quant_2',\r\n\t\t\t\tcost: 500,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_quant_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t],\r\n\t\tquality: [\r\n\t\t\t{\r\n\t\t\t\tid: 'w_qual_0',\r\n\t\t\t\tcost: 100,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_qual_1',\r\n\t\t\t\tcost: 200,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_qual_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_qual_2',\r\n\t\t\t\tcost: 500,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_qual_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t[types.part2]: {\r\n\t\tunlock: {\r\n\t\t\tid: 's_base_0',\r\n\t\t\tcost: 500,\r\n\t\t\tincrementer: 2,\r\n\t\t\tmultiplier: 3,\r\n\t\t\tupgradeDependencies: [\r\n\t\t\t\t'w_quant_1',\r\n\t\t\t\t'w_qual_1'\r\n\t\t\t]\r\n\t\t},\r\n\t\tquantity: [\r\n\t\t\t{\r\n\t\t\t\tid: 's_quant_0',\r\n\t\t\t\tcost: 750,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_quant_1',\r\n\t\t\t\tcost: 1500,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_quant_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_quant_2',\r\n\t\t\t\tcost: 5000,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_quant_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t],\r\n\t\tquality: [\r\n\t\t\t{\r\n\t\t\t\tid: 's_qual_0',\r\n\t\t\t\tcost: 1000,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_qual_1',\r\n\t\t\t\tcost: 2000,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_qual_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_qual_2',\r\n\t\t\t\tcost: 3000,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_qual_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n};\r\n\r\nexport const getDefaultFactoryUpgrades = () => [factoryPartUpgrades[types.part1].unlock.id];\r\n","import {\r\n\tfactoryPartUpgrades,\r\n\tgetBaseDesc,\r\n\tgetBaseName,\r\n\tgetDefaultFactoryUpgrades,\r\n\tgetQualityDesc,\r\n\tgetQualityName,\r\n\tgetQuantityDesc,\r\n\tgetQuantityName\r\n} from './data';\r\n\r\n\r\nexport const findUpgradeById = (id) => {\r\n\t// must traverse the entire upgrades map until we find it\r\n\t// first level is part types\r\n\tfor (const [partType, {unlock, quantity, quality}] of Object.entries(factoryPartUpgrades)) {\r\n\t\tif (unlock.id === id) {\r\n\t\t\treturn {\r\n\t\t\t\t...unlock,\r\n\t\t\t\ttype: partType\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuantity = quantity.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuantity) {\r\n\t\t\treturn {\r\n\t\t\t\t...foundInQuantity,\r\n\t\t\t\tincrementer: unlock.incrementer,\r\n\t\t\t\ttype: partType\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuality = quality.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuality) {\r\n\t\t\treturn {\r\n\t\t\t\t...foundInQuality,\r\n\t\t\t\tmultiplier: unlock.multiplier,\r\n\t\t\t\ttype: partType\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const getUpgradeForDisplayById = (id) => {\r\n\tfor (const [partType, {unlock, quantity, quality}] of Object.entries(factoryPartUpgrades)) {\r\n\t\tif (unlock.id === id) {\r\n\t\t\treturn {\r\n\t\t\t\tname: getBaseName(partType),\r\n\t\t\t\tdescription: getBaseDesc(partType, unlock.incrementer),\r\n\t\t\t\tcost: unlock.cost\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuantity = quantity.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuantity) {\r\n\t\t\treturn {\r\n\t\t\t\tname: getQuantityName(partType, foundInQuantity.level),\r\n\t\t\t\tdescription: getQuantityDesc(partType, foundInQuantity.incrementer, foundInQuantity.level),\r\n\t\t\t\tcost: unlock.cost\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuality = quality.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuality) {\r\n\t\t\treturn {\r\n\t\t\t\tname: getQualityName(partType, foundInQuality.level),\r\n\t\t\t\tdescription: getQualityDesc(partType, foundInQuality.multiplier, foundInQuality.incrementer, foundInQuality.level),\r\n\t\t\t\tcost: unlock.cost\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const getSingleClickIncrement = (gameState) => {\r\n\tconst mathsMap = {};  // each type will be under its key. accumulate, then do the math individually to get a total\r\n\tgameState.upgrades.forEach(upgradeId => {\r\n\t\tconst {type, level, incrementer, multiplier} = findUpgradeById(upgradeId);\r\n\t\tif (!mathsMap.hasOwnProperty(type)) {\r\n\t\t\tmathsMap[type] = {\r\n\t\t\t\tincrementer,\r\n\t\t\t\tmultiplier,\r\n\t\t\t\tmaxLevel: level || 0  // base unlocks don't have a level\r\n\t\t\t};\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!!incrementer) {\r\n\t\t\t\tmathsMap[type].incrementer += incrementer;\r\n\t\t\t}\r\n\t\t\tif (!!multiplier && level > mathsMap[type].maxLevel) {\r\n\t\t\t\tmathsMap[type].multiplier = multiplier;  // multiplier always the same for any type\r\n\t\t\t\tmathsMap[type].maxLevel = level;  // for calculation, level only applies to multipliers\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn Object.entries(mathsMap)\r\n\t\t.reduce(\r\n\t\t\t(runningTotal, [, {incrementer, multiplier, maxLevel}]) => runningTotal + (incrementer * Math.pow(multiplier, maxLevel)),\r\n\t\t\t0\r\n\t\t);\r\n};\r\n\r\nconst isUpgradeAcquired = (acquiredUpgrades, upgradeToFind) => {\r\n\t// acquired upgrades will be a list of ids from gameState\r\n\treturn acquiredUpgrades.findIndex(upgradeId => upgradeId === upgradeToFind.id) >= 0;\r\n};\r\n\r\nconst isUpgradeAvailable = (acquiredUpgrades, upgradeToCheck) => {\r\n\tif (isUpgradeAcquired(acquiredUpgrades, upgradeToCheck)) {\r\n\t\t// if you already have it, it's not available...\r\n\t\treturn false;\r\n\t}\r\n\tif (upgradeToCheck.hasOwnProperty('upgradeDependencies')) {\r\n\t\treturn upgradeToCheck.upgradeDependencies.reduce((isVisible, dependencyId) => {\r\n\t\t\treturn isVisible && isUpgradeAcquired(acquiredUpgrades, {id: dependencyId});\r\n\t\t}, true);\r\n\t}\r\n\telse {\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\nexport const getAvailableUpgradesForDisplay = (gameState) => {\r\n\t// get the acquired upgrades off the game state. this will include worker unlocks\r\n\tconst acquiredUpgrades = gameState.upgrades;\r\n\t// TODO: make for kennel too\r\n\r\n\t// make an array -> [{categoryName: '', upgrades: [...]}, ...]\r\n\tconst upgradesToReturn = [];\r\n\t// 1. go through factory part upgrades\r\n\t// for each key in the upgrades map (a part)\r\n\tfor (const [partType, {unlock, quantity, quality}] of Object.entries(factoryPartUpgrades)) {\r\n\t\tlet upgradesToAdd = [];\r\n\t\t// check if unlock is acquired\r\n\t\tif (isUpgradeAcquired(acquiredUpgrades, unlock)) {\r\n\t\t\t// if acquired, check quantity & quality upgrades for visibility\r\n\t\t\tupgradesToAdd = upgradesToAdd.concat(quantity.filter(upgrade => isUpgradeAvailable(acquiredUpgrades, upgrade)).map(upgrade => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: upgrade.id,\r\n\t\t\t\t\tcost: upgrade.cost,\r\n\t\t\t\t\tname: getQuantityName(partType, upgrade.level),\r\n\t\t\t\t\tdescription: getQuantityDesc(partType, unlock.incrementer, upgrade.level)\r\n\t\t\t\t};\r\n\t\t\t}));\r\n\t\t\tupgradesToAdd = upgradesToAdd.concat(quality.filter(upgrade => isUpgradeAvailable(acquiredUpgrades, upgrade)).map(upgrade => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: upgrade.id,\r\n\t\t\t\t\tcost: upgrade.cost,\r\n\t\t\t\t\tname: getQualityName(partType, upgrade.level),\r\n\t\t\t\t\tdescription: getQualityDesc(partType, unlock.incrementer, upgrade.level)\r\n\t\t\t\t};\r\n\t\t\t}));\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// if not acquired, check if available\r\n\t\t\tif (isUpgradeAvailable(acquiredUpgrades, unlock)) {\r\n\t\t\t\t// if available, add to map\r\n\t\t\t\tupgradesToAdd.push({\r\n\t\t\t\t\tid: unlock.id,\r\n\t\t\t\t\tcost: unlock.cost,\r\n\t\t\t\t\tname: getBaseName(partType),\r\n\t\t\t\t\tdescription: getBaseDesc(partType, unlock.incrementer)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if any upgrades are being added\r\n\t\tif (upgradesToAdd.length > 0) {\r\n\t\t\t// add these all to the available upgrades map under the right part\r\n\t\t\t// add section metadata (just plural name) with list of upgrades -> categoryName: '', upgrades: [...]\r\n\t\t\tupgradesToReturn.push({\r\n\t\t\t\tcategoryName: getBaseName(partType),\r\n\t\t\t\tupgrades: upgradesToAdd\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn upgradesToReturn;\r\n};\r\n\r\nexport const formatUpgradesForDisplay = ({upgrades: upgradeIdsToFormat}) => {\r\n\treturn upgradeIdsToFormat.map(getUpgradeForDisplayById);\r\n}\r\n\r\nexport const getFactoryDefault = () => getDefaultFactoryUpgrades();\r\n","import {createContext, useReducer} from 'react';\r\nimport {getWorkerById, loadWorkers, unlockableWorkers, updateIntervals} from './workers';\r\nimport {\r\n\tfindUpgradeById, formatUpgradesForDisplay,\r\n\tgetAvailableUpgradesForDisplay, getFactoryDefault,\r\n\tgetSingleClickIncrement\r\n} from '../../services/upgrades/service';\r\n\r\n\r\nconst GameContext = createContext();\r\n\r\nconst actionTypes = {\r\n\tclearGameState: 'CLEAR_GAME_STATE',\r\n\taddCoins: 'ADD_COINS',\r\n\tautoAddCoins: 'AUTO_ADD_COINS',\r\n\trecordClick: 'RECORD_CLICK',\r\n\tbuyUpgrade: 'BUY_UPGRADE',\r\n\tbuyWorker: 'BUY_WORKER'\r\n};\r\n\r\nconst saveState = (state) => {\r\n\tconst stateToSave = {\r\n\t\t...state,\r\n\t\t// workers: Object.fromEntries(state.workers.map(worker => [worker.id, worker.count]))\r\n\t};\r\n\r\n\tlocalStorage.setItem('gameState', JSON.stringify(stateToSave));\r\n};\r\n\r\nconst loadState = () => {\r\n\tconst loadedState = JSON.parse(localStorage.getItem('gameState'));\r\n\tif (loadedState !== null) {\r\n\t\t// loadedState.workers = loadWorkers('factory', loadedState.workers || []);\r\n\t\treturn loadedState;\r\n\t}\r\n\telse {\r\n\t\treturn {\r\n\t\t\ttotalClicks: 0,\r\n\t\t\ttotalCoins: 0,\r\n\t\t\tlifetimeCoins: 0,\r\n\t\t\tworkers: [],\r\n\t\t\tupgrades: getFactoryDefault()\r\n\t\t};\r\n\t}\r\n};\r\n\r\n\r\nconst handleAutoIncrement = (dispatch) => (coins) => {\r\n\tdispatch({type: actionTypes.autoAddCoins, payload: {coins}});\r\n};\r\n\r\nconst gameReducer = (state, action) => {\r\n\tlet newState, totalCoins;\r\n\tswitch (action.type) {\r\n\t\tcase actionTypes.recordClick:\r\n\t\t\tlet totalClicks = state.totalClicks + 1;\r\n\t\t\tnewState = {...state, totalClicks};\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.addCoins:\r\n\t\t\tconst numCoinsToAdd = getSingleClickIncrement(state);\r\n\r\n\t\t\ttotalCoins = state.totalCoins + numCoinsToAdd;\r\n\r\n\t\t\tnewState = {...state, totalCoins, lifetimeCoins: state.lifetimeCoins + numCoinsToAdd};\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.autoAddCoins:\r\n\t\t\tconst addedCoins = action.payload.coins;\r\n\t\t\ttotalCoins = state.totalCoins + addedCoins;\r\n\t\t\tnewState = {...state, totalCoins, lifetimeCoins: state.lifetimeCoins + addedCoins};\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.buyUpgrade:\r\n\t\t\t// if you've already bought it, ignore this\r\n\t\t\tif (state.upgrades.findIndex(upgrade => upgrade.id === action.payload.id) >= 0) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\tconst item = findUpgradeById(action.payload.id);\r\n\t\t\t// if you can't afford it, then also ignore it TODO: should i put cost in the payload of this action?\r\n\t\t\tif (state.totalCoins < item.cost) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tnewState = {...state, upgrades: [...state.upgrades, item.id], totalCoins: state.totalCoins - item.cost};\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.buyWorker:\r\n\t\t\tconst foundWorker = state.workers.find(worker => worker.id === action.payload.id);\r\n\t\t\tif (foundWorker) {\r\n\t\t\t\tif (foundWorker.cost > state.totalCoins) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t\tfoundWorker.addWorker();\r\n\t\t\t\t// saveState(newState);\r\n\t\t\t\tnewState = {...state, totalCoins: state.totalCoins - foundWorker.cost};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst workerToAdd = getWorkerById(action.payload.type, action.payload.id);\r\n\t\t\t\tif (workerToAdd.cost > state.totalCoins) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t\tworkerToAdd.addWorker();\r\n\t\t\t\tnewState = {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tworkers: [...state.workers, workerToAdd],\r\n\t\t\t\t\ttotalCoins: state.totalCoins - workerToAdd.cost\r\n\t\t\t\t};\r\n\t\t\t\tsaveState(newState);\r\n\t\t\t}\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.clearGameState:\r\n\t\t\tnewState = {\r\n\t\t\t\ttotalClicks: 0,\r\n\t\t\t\ttotalCoins: 0,\r\n\t\t\t\tlifetimeCoins: 0,\r\n\t\t\t\tworkers: [],\r\n\t\t\t\tupgrades: getFactoryDefault()\r\n\t\t\t};\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nfunction GameWrapper ({children}) {\r\n\tconst [state, dispatch] = useReducer(gameReducer, {}, loadState);\r\n\r\n\t// updateIntervals(state, handleAutoIncrement(dispatch));\r\n\r\n\tconst getAvailableWorkers = (type) => {\r\n\t\t// const workerList = [...unlockableWorkers[type]];\r\n\t\t// return workerList.filter(worker => worker.isVisible(state));\r\n\t\treturn [];\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<GameContext.Provider value={\r\n\t\t\t{\r\n\t\t\t\t...state,\r\n\t\t\t\trecordClick: () => dispatch({type: actionTypes.recordClick}),\r\n\t\t\t\taddCoins: () => dispatch({type: actionTypes.addCoins}),\r\n\t\t\t\tbuyUpgrade: (type, id) => dispatch({type: actionTypes.buyUpgrade, payload: {type, id}}),\r\n\t\t\t\tbuyWorker: (type, id) => {\r\n\t\t\t\t\tdispatch({type: actionTypes.buyWorker, payload: {type, id}});\r\n\t\t\t\t\t// updateIntervals(state, handleAutoIncrement(dispatch));\r\n\t\t\t\t},\r\n\t\t\t\tgetAvailableUpgrades: () => getAvailableUpgradesForDisplay(state),\r\n\t\t\t\tgetAcquiredUpgrades: () => formatUpgradesForDisplay(state),\r\n\t\t\t\tgetAvailableWorkers,\r\n\t\t\t\t// canSeeWorkers: canSeeWorkers(state)\r\n\t\t\t\tcanSeeWorkers: false,\r\n\t\t\t\tresetGame: () => dispatch({type: actionTypes.clearGameState})\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</GameContext.Provider>\r\n\t);\r\n}\r\n\r\nexport {GameContext, GameWrapper};","import {ViewContext} from '../../App';\r\nimport {GameContext} from '../game/GameWrapper';\r\n\r\n\r\nexport default function Overview () {\r\n\treturn (\r\n\t\t<ViewContext.Consumer>\r\n\t\t\t{({showFactory, showKennel}) => (\r\n\t\t\t\t<GameContext.Consumer>\r\n\t\t\t\t\t{({resetGame}) => (\r\n\t\t\t\t\t\t<div className=\"overview\">\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>Factory</h2>\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t<li>Interesting Stats</li>\r\n\t\t\t\t\t\t\t\t\t<li>What are they</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<button onClick={showFactory}>Go to Factory</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>Tools</h2>\r\n\t\t\t\t\t\t\t\t<p>Hey. You probably want to do this if your game seems broken.</p>\r\n\t\t\t\t\t\t\t\t<button onClick={resetGame}>Reset Game</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>Pet Kennel</h2>\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t<li>Interesting Stats</li>\r\n\t\t\t\t\t\t\t\t\t<li>What are they</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<button onClick={showKennel}>Go to Pets</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</GameContext.Consumer>\r\n\t\t\t)}\r\n\t\t</ViewContext.Consumer>\r\n\t);\r\n}","export default function TwoPanel ({tabsContent, mainContent}) {\r\n\treturn (\r\n\t\t<div className=\"two-panel\">\r\n\t\t\t<div className=\"tabs-panel\">\r\n\t\t\t\t{tabsContent}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"main-panel\">\r\n\t\t\t\t{mainContent}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}","import {createContext, useState} from 'react';\r\n\r\n\r\nconst TabContext = createContext();\r\n\r\nfunction Tabs ({children, defaultTabKey}) {\r\n\tconst [currentTab, setCurrentTab] = useState(defaultTabKey);\r\n\treturn (\r\n\t\t<TabContext.Provider value={{\r\n\t\t\tcurrentTab,\r\n\t\t\tsetCurrentTab,\r\n\t\t\tisCurrentTab: (tabKey) => currentTab === tabKey\r\n\t\t}}>\r\n\t\t\t{children}\r\n\t\t</TabContext.Provider>\r\n\t);\r\n}\r\n\r\nfunction TabsContainer ({children}) {\r\n\treturn (\r\n\t\t<div className={'tabs-container'}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction Tab ({children, tabKey}) {\r\n\treturn (\r\n\t\t<TabContext.Consumer>\r\n\t\t\t{({isCurrentTab, setCurrentTab}) => (\r\n\t\t\t\t<div className={`tab${isCurrentTab(tabKey) ? ' current' : ''}`}\r\n\t\t\t\t\t role={'button'}\r\n\t\t\t\t\t onClick={isCurrentTab(tabKey) ? null : () => setCurrentTab(tabKey)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</TabContext.Consumer>\r\n\t);\r\n}\r\n\r\nfunction TabContent ({children, tabKey}) {\r\n\treturn (\r\n\t\t<TabContext.Consumer>\r\n\t\t\t{({isCurrentTab}) => isCurrentTab(tabKey) && (\r\n\t\t\t\t<div className={'tab-content'}>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</TabContext.Consumer>\r\n\t);\r\n}\r\n\r\nexport {TabsContainer, Tab, Tabs, TabContent};","import TwoPanel from '../TwoPanel';\r\nimport {Tab, TabContent, Tabs, TabsContainer} from '../Tabs';\r\nimport {GameContext} from '../game/GameWrapper';\r\n\r\n\r\nexport default function Factory () {\r\n\tconst renderTabs = () => (\r\n\t\t<GameContext.Consumer>\r\n\t\t\t{({buyUpgrade, buyWorker, canSeeWorkers, getAvailableUpgrades, getAvailableWorkers, lifetimeCoins, totalClicks, totalCoins}) => {\r\n\t\t\t\tconst availableUpgrades = getAvailableUpgrades('factory');\r\n\t\t\t\tconst availableWorkers = getAvailableWorkers('factory');\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Tabs defaultTabKey={'upgrades'}>\r\n\t\t\t\t\t\t\t<TabsContainer>\r\n\t\t\t\t\t\t\t\t<Tab tabKey={'upgrades'}>Upgrades</Tab>\r\n\t\t\t\t\t\t\t\t{canSeeWorkers && <Tab tabKey={'workers'}>Workers</Tab>}\r\n\t\t\t\t\t\t\t\t<Tab tabKey={'stats'}>Stats</Tab>\r\n\t\t\t\t\t\t\t\t<Tab tabKey={'achievements'}>Achievements</Tab>\r\n\t\t\t\t\t\t\t</TabsContainer>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'upgrades'}>\r\n\t\t\t\t\t\t\t\t<span>{totalCoins} C</span>\r\n\t\t\t\t\t\t\t\t{availableUpgrades.map(({categoryName, upgrades}) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t<h3>{categoryName}</h3>\r\n\t\t\t\t\t\t\t\t\t\t{upgrades.map(upgrade => {\r\n\t\t\t\t\t\t\t\t\t\t\tlet extraClass = '';\r\n\t\t\t\t\t\t\t\t\t\t\tlet helperText = '';\r\n\t\t\t\t\t\t\t\t\t\t\tif (upgrade.purchased) {\r\n\t\t\t\t\t\t\t\t\t\t\t\textraClass = 'unavailable';\r\n\t\t\t\t\t\t\t\t\t\t\t\thelperText = 'You already have this!';\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse if (upgrade.cost > totalCoins) {\r\n\t\t\t\t\t\t\t\t\t\t\t\textraClass = 'expensive';\r\n\t\t\t\t\t\t\t\t\t\t\t\thelperText = 'You can\\'t buy this yet.';\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\thelperText = 'You can buy this!';\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div key={upgrade.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t className={`upgrade ${extraClass}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t role={'button'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t onClick={() => buyUpgrade('factory', upgrade.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={'upgrade-title'}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4>{upgrade.name}</h4>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!upgrade.purchased && <span>COST: {upgrade.cost} C</span>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{upgrade.description}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<small>{helperText}</small>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</TabContent>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'stats'}>\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t<li>Click Count: {totalClicks}</li>\r\n\t\t\t\t\t\t\t\t\t<li>Total Coins Earned: {lifetimeCoins} C</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</TabContent>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'achievements'}>Achivements go here</TabContent>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'workers'}>\r\n\t\t\t\t\t\t\t\t{availableWorkers.map(worker => {\r\n\t\t\t\t\t\t\t\t\tlet extraClass = '';\r\n\t\t\t\t\t\t\t\t\tlet helperText = '';\r\n\t\t\t\t\t\t\t\t\tif (worker.cost > totalCoins) {\r\n\t\t\t\t\t\t\t\t\t\textraClass = 'expensive';\r\n\t\t\t\t\t\t\t\t\t\thelperText = 'You can\\'t buy this right now.';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\thelperText = 'You can buy this!';\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<div key={worker.id}\r\n\t\t\t\t\t\t\t\t\t\t\t className={`upgrade ${extraClass}`}\r\n\t\t\t\t\t\t\t\t\t\t\t role={'button'}\r\n\t\t\t\t\t\t\t\t\t\t\t onClick={() => buyWorker('factory', worker.id)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className={'upgrade-title'}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h3>{worker.name} ({worker.count})</h3>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span>COST: {worker.cost} C</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<p>{worker.description}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t<small>{helperText}</small>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</TabContent>\r\n\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t</>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</GameContext.Consumer>\r\n\t);\r\n\r\n\tconst renderMain = () => (\r\n\t\t<GameContext.Consumer>\r\n\t\t\t{({addCoins, recordClick, getAcquiredUpgrades}) => {\r\n\t\t\t\tconst upgrades = getAcquiredUpgrades();\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<button id={'factory'} onClick={() => {\r\n\t\t\t\t\t\t\trecordClick();\r\n\t\t\t\t\t\t\taddCoins();\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<img src={''} alt={'the factory - click to make parts'}/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h3>Upgrades you have:</h3>\r\n\t\t\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t\t\t{upgrades.map(upgrade => <li key={upgrade.id}>{upgrade.name}</li>)}\r\n\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</GameContext.Consumer>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<TwoPanel tabsContent={renderTabs()} mainContent={renderMain()}/>\r\n\t);\r\n}","import {ViewContext} from '../../App';\r\nimport TwoPanel from '../TwoPanel';\r\n\r\n\r\nexport default function Kennel () {\r\n\tconst renderTabs = () => <h2>Kennel</h2>;\r\n\r\n\tconst renderMain = () => \"it's exciting\";\r\n\r\n\treturn (\r\n\t\t<ViewContext.Consumer>\r\n\t\t\t{() => (\r\n\t\t\t\t<TwoPanel tabsContent={renderTabs()} mainContent={renderMain()} />\r\n\t\t\t)}\r\n\t\t</ViewContext.Consumer>\r\n\t);\r\n}","import {GameContext} from './game/GameWrapper';\r\nimport {ViewContext} from '../App';\r\n\r\n\r\nexport default function Header () {\r\n\treturn (\r\n\t\t<ViewContext.Consumer>\r\n\t\t\t{({isCurrentViewFactory, isCurrentViewKennel, isCurrentViewOverview, showFactory, showKennel, showOverview}) => (\r\n\t\t\t\t<GameContext.Consumer>\r\n\t\t\t\t\t{({totalCoins}) => (\r\n\t\t\t\t\t\t<header>\r\n\t\t\t\t\t\t\t<h1 role={\"button\"} onClick={showOverview}>Robot Pet Factory</h1>\r\n\t\t\t\t\t\t\t<nav>\r\n\t\t\t\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t\t\t\t<li className={isCurrentViewOverview() ? 'current' : ''}\r\n\t\t\t\t\t\t\t\t\t\trole={'button'}\r\n\t\t\t\t\t\t\t\t\t\tonClick={showOverview}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tOverview\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className={isCurrentViewFactory() ? 'current' : ''}\r\n\t\t\t\t\t\t\t\t\t\trole={'button'}\r\n\t\t\t\t\t\t\t\t\t\tonClick={showFactory}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tFactory\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className={isCurrentViewKennel() ? 'current' : ''}\r\n\t\t\t\t\t\t\t\t\t\trole={'button'}\r\n\t\t\t\t\t\t\t\t\t\tonClick={showKennel}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tKennel\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t\t</nav>\r\n\t\t\t\t\t\t\t<div>{totalCoins} C</div>\r\n\t\t\t\t\t\t</header>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</GameContext.Consumer>\r\n\t\t\t)}\r\n\t\t</ViewContext.Consumer>\r\n\t);\r\n}","import './App.scss';\nimport {createContext, useState} from 'react';\nimport Overview from './components/overview/Overview';\nimport Factory from './components/factory/Factory';\nimport Kennel from './components/kennel/Kennel';\nimport {GameWrapper} from './components/game/GameWrapper';\nimport Header from './components/Header';\n\n\nconst views = {\n\toverview: 'OVERVIEW',\n\tfactory: 'FACTORY',\n\tkennel: 'KENNEL'\n};\n\nexport const ViewContext = createContext();\n\nfunction App () {\n\tconst [currentView, setCurrentView] = useState(views.overview);\n\n\tlet viewContent;\n\n\tif (currentView === views.factory) {\n\t\tviewContent = <Factory/>;\n\t}\n\telse if (currentView === views.kennel) {\n\t\tviewContent = <Kennel/>;\n\t}\n\telse {  // views.overview\n\t\tviewContent = <Overview/>;\n\t}\n\n\treturn (\n\t\t<ViewContext.Provider value={{\n\t\t\tshowOverview: () => setCurrentView(views.overview),\n\t\t\tshowFactory: () => setCurrentView(views.factory),\n\t\t\tshowKennel: () => setCurrentView(views.kennel),\n\t\t\tisCurrentViewOverview: () => currentView === views.overview,\n\t\t\tisCurrentViewFactory: () => currentView === views.factory,\n\t\t\tisCurrentViewKennel: () => currentView === views.kennel\n\t\t}}>\n\t\t\t<GameWrapper>\n\t\t\t\t<div className=\"dashboard\">\n\t\t\t\t\t<Header/>\n\t\t\t\t\t{viewContent}\n\t\t\t\t</div>\n\t\t\t</GameWrapper>\n\t\t</ViewContext.Provider>\n\t);\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n\t// StringMode is making the game reducer double worker count due todouble invocation of the reducer. this is likely\n\t// a big problem but i don't want to deal with it.\n\t// <React.StrictMode>\n\t<App/>,\n\t// </React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}