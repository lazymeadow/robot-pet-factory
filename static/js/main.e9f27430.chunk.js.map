{"version":3,"sources":["services/upgrades/data.js","services/workers/data.js","services/workers/service.js","services/upgrades/service.js","components/game/GameWrapper.js","components/overview/Overview.js","components/TwoPanel.js","components/Tabs.js","components/factory/Factory.js","components/kennel/Kennel.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["types","partTypes","part1","part2","typeNames","singular","plural","getBaseName","type","charAt","toUpperCase","slice","length","getBaseDesc","price","getQuantityDesc","quantity","level","Math","pow","getQualityDesc","multiplier","getQuantityName","getQualityName","factoryUpgrades","id","cost","name","workerMax","description","upgradeDependencies","factoryPartUpgrades","unlock","incrementer","quality","getWorkerName","getWorkerDesc","worker","factoryWorkers","makes","getSingularName","interval","workerDependencies","findWorkerByType","findUpgradeById","Object","entries","partType","foundInQuantity","find","upgrade","foundInQuality","getPartUpgradeForDisplayById","isUpgradeAcquired","acquiredUpgrades","upgradeToFind","findIndex","upgradeId","isUpgradeAvailable","upgradeToCheck","hasOwnProperty","reduce","isVisible","dependencyId","getAllAcquiredUpgrades","gameState","upgrades","factoryLevel","map","getFactoryDefault","GameContext","createContext","actionTypes","saveState","loading","state","stateToSave","version","process","localStorage","setItem","JSON","stringify","defaultGameState","totalClicks","totalCoins","lifetimeCoins","workerLifetimeCoins","itemCountsForStats","fromEntries","values","workers","loadState","loadedState","parse","getItem","shouldClearState","alert","defaultState","gameReducer","action","newState","mathsMap","forEach","incLevel","multLevel","numCoinsToAdd","ceil","runningTotal","incTotal","getSingleClickData","keys","totalCoinsToAdd","totalItemCountsForStats","payload","workerType","count","relevantPartUpgrades","filter","includes","acc","max","getWorkerIncrementData","assign","nextLevel","item","updatedWorkers","currentFactoryLevel","workerToBuy","handleAutoIncrement","dispatch","workersWhoDelivered","intervalIds","updateIntervals","incrementHandler","intervalId","window","clearInterval","splice","intervalMap","push","setInterval","GameWrapper","children","useReducer","Provider","value","stats","statsThatMatter","coins","isPartTypeUnlocked","currDep","isWorkerTypeUnlocked","getStats","recordClick","addCoins","buyUpgrade","buyWorker","getAvailableUpgrades","allAcquiredUpgrades","upgradesToReturn","nextFactoryLevel","categoryName","upgradesToAdd","concat","getAvailableUpgradesForDisplay","getAcquiredUpgrades","upgradeIdsToFormat","formatUpgradesForDisplay","getAvailableWorkers","workersToReturn","workerCount","getAvailableWorkersForDisplay","canSeeWorkers","resetGame","currentMaxWorkers","Overview","ViewContext","Consumer","showFactory","showKennel","className","onClick","TwoPanel","tabsContent","mainContent","TabContext","Tabs","defaultTabKey","useState","currentTab","setCurrentTab","isCurrentTab","tabKey","TabsContainer","Tab","role","TabContent","Factory","renderAvailableUpgrades","availableUpgrades","extraClass","helperText","purchased","src","alt","renderAvailableWorkers","availableWorkers","stat","Kennel","Header","isCurrentViewFactory","isCurrentViewKennel","isCurrentViewOverview","showOverview","views","App","viewContent","currentView","setCurrentView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9f27430.chunk.js","sourcesContent":["export const types = {\r\n\tpart1: 'PART_1',\r\n\tpart2: 'PART_2',\r\n\tfactory: 'FACTORY'\r\n};\r\n\r\nexport const partTypes = {\r\n\tpart1: types.part1,\r\n\tpart2: types.part2\r\n};\r\n\r\nconst typeNames = {\r\n\t[types.part1]: {\r\n\t\tsingular: 'wire',\r\n\t\tplural: 'wires'\r\n\t},\r\n\t[types.part2]: {\r\n\t\tsingular: 'screw',\r\n\t\tplural: 'screws'\r\n\t}\r\n};\r\n\r\n// wow\r\nexport const getBaseName = (type) => typeNames[type].plural.charAt(0).toUpperCase() + typeNames[type].plural.slice(1, typeNames[type].plural.length);\r\nexport const getSingularName = (type) => typeNames[type].singular;\r\nexport const getBaseDesc = (type, price) => `Every click makes 1 ${typeNames[type].singular}, worth ${price} C.`;\r\nexport const getQuantityDesc = (type, quantity, level) => {\r\n\tif (level === 3) {\r\n\t\treturn `You make so many ${typeNames[type].plural}, ${quantity * Math.pow(2, level)} per click.`;\r\n\t}\r\n\treturn `Every click makes ${quantity * Math.pow(2, level)} ${level > 0 ? typeNames[type].plural : typeNames[type].singular}.`;\r\n};\r\nexport const getQualityDesc = (type, multiplier, price, level) => {\r\n\tif (level === 1) {\r\n\t\treturn `Your ${typeNames[type].plural} are better, and are worth ${price * Math.pow(multiplier, 2)} C each`;\r\n\t}\r\n\tif (level === 2) {\r\n\t\treturn `Your ${typeNames[type].plural} are even better, and are worth ${price * Math.pow(multiplier, 3)} C each`;\r\n\t}\r\n\tif (level === 3) {\r\n\t\treturn `You make the best possible ${typeNames[type].plural}, and are worth ${price * Math.pow(multiplier, 4)} C each`;\r\n\t}\r\n};\r\n\r\nexport const getQuantityName = (type, level) => {\r\n\tif (level === 1) {\r\n\t\treturn `More ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level === 2) {\r\n\t\treturn `Even more ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level === 3) {\r\n\t\treturn `So many ${typeNames[type].plural}`;\r\n\t}\r\n};\r\nexport const getQualityName = (type, level) => {\r\n\tif (level === 1) {\r\n\t\treturn `Better ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level === 2) {\r\n\t\treturn `Even better ${typeNames[type].plural}`;\r\n\t}\r\n\tif (level === 3) {\r\n\t\treturn `The best ${typeNames[type].plural}`;\r\n\t}\r\n};\r\n\r\nexport const factoryUpgrades = [\r\n\t{\r\n\t\tid: 'f_0',\r\n\t\ttype: types.factory,\r\n\t\tcost: 0,\r\n\t\tmultiplier: 1,\r\n\t\tname: 'Basic Factory',\r\n\t\tworkerMax: 0\r\n\t},\r\n\t{\r\n\t\tid: 'f_1',\r\n\t\ttype: types.factory,\r\n\t\tcost: 100,\r\n\t\tmultiplier: 1.05,\r\n\t\tname: 'Factory Level 1',\r\n\t\tdescription: 'Your factory is 5% more effective, plus you can have workers now!',\r\n\t\tupgradeDependencies: [\r\n\t\t\t'f_0',\r\n\t\t\t'w_quant_0',\r\n\t\t\t'w_qual_0'\r\n\t\t],\r\n\t\tworkerMax: 10\r\n\t},\r\n\t{\r\n\t\tid: 'f_2',\r\n\t\ttype: types.factory,\r\n\t\tcost: 500,\r\n\t\tmultiplier: 1.10,\r\n\t\tname: 'Factory Level 2',\r\n\t\tdescription: 'Your factory is 10% more effective, and you can have more workers.',\r\n\t\tupgradeDependencies: [\r\n\t\t\t'f_1',\r\n\t\t\t's_quant_0',\r\n\t\t\t's_qual_0'\r\n\t\t],\r\n\t\tworkerMax: 25\r\n\t}\r\n];\r\n\r\nexport const factoryPartUpgrades = {\r\n\t[types.part1]: {\r\n\t\tunlock: {\r\n\t\t\tid: 'w_base_0',\r\n\t\t\tcost: 0,\r\n\t\t\tincrementer: 1,\r\n\t\t\tmultiplier: 2\r\n\t\t},\r\n\t\tquantity: [\r\n\t\t\t{\r\n\t\t\t\tid: 'w_quant_0',\r\n\t\t\t\tcost: 100,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_quant_1',\r\n\t\t\t\tcost: 250,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_quant_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_quant_2',\r\n\t\t\t\tcost: 500,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_quant_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t],\r\n\t\tquality: [\r\n\t\t\t{\r\n\t\t\t\tid: 'w_qual_0',\r\n\t\t\t\tcost: 100,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_qual_1',\r\n\t\t\t\tcost: 250,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_qual_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'w_qual_2',\r\n\t\t\t\tcost: 500,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t'w_qual_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t[types.part2]: {\r\n\t\tunlock: {\r\n\t\t\tid: 's_base_0',\r\n\t\t\tcost: 500,\r\n\t\t\tincrementer: 2,\r\n\t\t\tmultiplier: 3,\r\n\t\t\tupgradeDependencies: [\r\n\t\t\t\t'w_quant_1',\r\n\t\t\t\t'w_qual_1',\r\n\t\t\t\t'f_1'\r\n\t\t\t]\r\n\t\t},\r\n\t\tquantity: [\r\n\t\t\t{\r\n\t\t\t\tid: 's_quant_0',\r\n\t\t\t\tcost: 1000,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_quant_1',\r\n\t\t\t\tcost: 2500,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_quant_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_quant_2',\r\n\t\t\t\tcost: 5000,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_quant_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t],\r\n\t\tquality: [\r\n\t\t\t{\r\n\t\t\t\tid: 's_qual_0',\r\n\t\t\t\tcost: 1000,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_base_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_qual_1',\r\n\t\t\t\tcost: 2500,\r\n\t\t\t\tlevel: 2,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_qual_0'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 's_qual_2',\r\n\t\t\t\tcost: 5000,\r\n\t\t\t\tlevel: 3,\r\n\t\t\t\tupgradeDependencies: [\r\n\t\t\t\t\t's_qual_1'\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n};\r\n\r\nexport const getDefaultPartsUpgrades = () => [factoryPartUpgrades[types.part1].unlock.id];\r\nexport const getDefaultFactoryUpgrades = () => [factoryUpgrades[0]];\r\n","import {getBaseName, getSingularName, partTypes} from '../upgrades/data';\r\n\r\n\r\nconst types = {\r\n\tworker1: 'WORKER_1',\r\n\tworker2: 'WORKER_2'\r\n};\r\n\r\nconst typeNames = {\r\n\t[types.worker1]: {\r\n\t\tsingular: 'mouse droid',\r\n\t\tplural: 'mouse droids'\r\n\t},\r\n\t[types.worker2]: {\r\n\t\tsingular: 'twisty bot',\r\n\t\tplural: 'twisty bots'\r\n\t}\r\n};\r\n\r\nexport const getWorkerName = (type) => typeNames[type].plural.charAt(0).toUpperCase() + typeNames[type].plural.slice(1, typeNames[type].plural.length);\r\nexport const getWorkerDesc = (type) => {\r\n\tconst worker = factoryWorkers[type];\r\n\treturn `${getWorkerName(type)} create ${worker.incrementer} ${worker.incrementer > 1 ? getBaseName(worker.makes) : getSingularName(worker.makes)} every ${worker.interval} seconds.`;\r\n};\r\n\r\n\r\nexport const factoryWorkers = {\r\n\t[types.worker1]: {\r\n\t\tid: 'worker_0',\r\n\t\tmakes: partTypes.part1,\r\n\t\tcost: 25,\r\n\t\tincrementer: 1,\r\n\t\tinterval: 3,\r\n\t\tworkerDependencies: [\r\n\t\t\t'f_1'\r\n\t\t]\r\n\t},\r\n\t[types.worker2]: {\r\n\t\tid: 'worker_1',\r\n\t\tmakes: partTypes.part2,\r\n\t\tcost: 75,\r\n\t\tincrementer: 2,\r\n\t\tinterval: 5,\r\n\t\tworkerDependencies: [\r\n\t\t\t's_quant_0',\r\n\t\t\t's_qual_0'\r\n\t\t]\r\n\t}\r\n};\r\n","import {factoryWorkers, getWorkerDesc, getWorkerName} from './data';\r\nimport {getAllAcquiredUpgrades, isUpgradeAcquired} from '../upgrades/service';\r\n\r\n\r\nexport const findWorkerByType = (type) => {\r\n\treturn factoryWorkers[type];\r\n};\r\n\r\nexport const isWorkerTypeUnlocked = (acquiredUpgrades, type) => {\r\n\tconst worker = findWorkerByType(type);\r\n\tif (!worker) {\r\n\t\treturn false;\r\n\t}\r\n\treturn worker.workerDependencies.reduce((acc, currDep) => acc && isUpgradeAcquired(acquiredUpgrades, {id: currDep}), true);\r\n}\r\n\r\nexport const getAvailableWorkersForDisplay = (gameState) => {\r\n\t// add the factory level upgrades to the acquired upgrades list for checking\r\n\tconst allAcquiredUpgrades = getAllAcquiredUpgrades(gameState);\r\n\r\n\tconst workersToReturn = [];\r\n\tfor (const [workerType, {id, cost, workerDependencies}] of Object.entries(factoryWorkers)) {\r\n\t\tlet shouldAddWorker = workerDependencies.reduce((acc, currDep) => acc && isUpgradeAcquired(allAcquiredUpgrades, {id: currDep}), true);\r\n\t\tif (shouldAddWorker) {\r\n\t\t\tconst workerCount = gameState.workers.hasOwnProperty(workerType) ? gameState.workers[workerType] : 0;\r\n\t\t\tworkersToReturn.push({\r\n\t\t\t\tid,\r\n\t\t\t\tcost: Math.ceil(cost * Math.pow(2, workerCount)),\r\n\t\t\t\tcount: workerCount,\r\n\t\t\t\tname: getWorkerName(workerType),\r\n\t\t\t\tdescription: getWorkerDesc(workerType),\r\n\t\t\t\ttype: workerType\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn workersToReturn;\r\n};","import {\r\n\tfactoryPartUpgrades, factoryUpgrades,\r\n\tgetBaseDesc,\r\n\tgetBaseName,\r\n\tgetDefaultPartsUpgrades,\r\n\tgetQualityDesc,\r\n\tgetQualityName,\r\n\tgetQuantityDesc,\r\n\tgetQuantityName\r\n} from './data';\r\nimport {findWorkerByType} from '../workers/service';\r\n\r\n\r\nexport const findUpgradeById = (id) => {\r\n\t// must traverse the entire upgrades map until we find it\r\n\t// first level is part types\r\n\tfor (const [partType, {unlock, quantity, quality}] of Object.entries(factoryPartUpgrades)) {\r\n\t\tif (unlock.id === id) {\r\n\t\t\treturn {\r\n\t\t\t\t...unlock,\r\n\t\t\t\ttype: partType\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuantity = quantity.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuantity) {\r\n\t\t\treturn {\r\n\t\t\t\t...foundInQuantity,\r\n\t\t\t\tincrementer: unlock.incrementer,\r\n\t\t\t\ttype: partType\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuality = quality.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuality) {\r\n\t\t\treturn {\r\n\t\t\t\t...foundInQuality,\r\n\t\t\t\tmultiplier: unlock.multiplier,\r\n\t\t\t\ttype: partType\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t// next try factory upgrades\r\n\tfor (const upgrade of factoryUpgrades) {\r\n\t\tif (upgrade.id === id) {\r\n\t\t\treturn {\r\n\t\t\t\t...upgrade\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const getPartUpgradeForDisplayById = (id) => {\r\n\tfor (const [partType, {unlock, quantity, quality}] of Object.entries(factoryPartUpgrades)) {\r\n\t\tif (unlock.id === id) {\r\n\t\t\treturn {\r\n\t\t\t\tname: getBaseName(partType),\r\n\t\t\t\ttype: partType,\r\n\t\t\t\tdescription: getBaseDesc(partType, unlock.incrementer),\r\n\t\t\t\tcost: unlock.cost\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuantity = quantity.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuantity) {\r\n\t\t\treturn {\r\n\t\t\t\tname: getQuantityName(partType, foundInQuantity.level),\r\n\t\t\t\ttype: partType,\r\n\t\t\t\tdescription: getQuantityDesc(partType, foundInQuantity.incrementer, foundInQuantity.level),\r\n\t\t\t\tcost: unlock.cost\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst foundInQuality = quality.find(upgrade => upgrade.id === id);\r\n\t\tif (foundInQuality) {\r\n\t\t\treturn {\r\n\t\t\t\tname: getQualityName(partType, foundInQuality.level),\r\n\t\t\t\ttype: partType,\r\n\t\t\t\tdescription: getQualityDesc(partType, foundInQuality.multiplier, foundInQuality.incrementer, foundInQuality.level),\r\n\t\t\t\tcost: unlock.cost\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const getWorkerIncrementData = (gameState, workerType) => {\r\n\tconst worker = {...findWorkerByType(workerType), count: gameState.workers[workerType]};\r\n\t// get multiplier for this worker's output part\r\n\tconst relevantPartUpgrades = factoryPartUpgrades[worker.makes];\r\n\tconst multiplier = relevantPartUpgrades.unlock.multiplier;\r\n\tconst multLevel = relevantPartUpgrades.quality.filter(upgrade => gameState.upgrades.includes(upgrade.id)).reduce((acc, upgrade) => Math.max(acc, upgrade.level), 0);\r\n\r\n\treturn {\r\n\t\t// use incrementer to add coins based on current part value times the number of workers\r\n\t\tnumCoinsToAdd: worker.count * worker.incrementer * (multLevel > 0 ? Math.pow(multiplier, multLevel + 1) : 1),\r\n\t\t// tally parts made by this worker type for stats\r\n\t\titemCountsForStats: {\r\n\t\t\t[worker.makes]: worker.count * worker.incrementer\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const getSingleClickData = (gameState) => {\r\n\tconst mathsMap = {};  // each type will be under its key. accumulate, then do the math individually to get a total\r\n\tgameState.upgrades.forEach(upgradeId => {\r\n\t\tconst {type, level, incrementer, multiplier} = findUpgradeById(upgradeId);\r\n\t\tif (!mathsMap.hasOwnProperty(type)) {\r\n\t\t\tmathsMap[type] = {\r\n\t\t\t\tincrementer,\r\n\t\t\t\tmultiplier,\r\n\t\t\t\tincLevel: 0,\r\n\t\t\t\tmultLevel: 0  // base upgrades are level 0\r\n\t\t\t};\r\n\t\t}\r\n\t\tif (!!incrementer && level > mathsMap[type].incLevel) {\r\n\t\t\tmathsMap[type].incLevel = level;\r\n\t\t}\r\n\t\tif (!!multiplier && level > mathsMap[type].multLevel) {\r\n\t\t\tmathsMap[type].multLevel = level;  // for calculation, level only applies to multipliers\r\n\t\t}\r\n\t});\r\n\r\n\tconst itemCountsForStats = {};\r\n\r\n\tconst numCoinsToAdd = Math.ceil(factoryUpgrades[gameState.factoryLevel].multiplier * Object.entries(mathsMap)\r\n\t\t.reduce(\r\n\t\t\t(runningTotal, [type, {incrementer, incLevel, multiplier, multLevel}]) => {\r\n\t\t\t\t// quant/increment => incrementer * 2 ^ incLevel\r\n\t\t\t\tconst incTotal = incrementer * Math.pow(2, incLevel);\r\n\t\t\t\titemCountsForStats[type] = incTotal;\r\n\t\t\t\t// qual/multiply => 1 @ level 0, or multiplier ^ (multLevel + 1)\r\n\t\t\t\tconst multTotal = multLevel > 0 ? Math.pow(multiplier, multLevel + 1) : 1;\r\n\t\t\t\treturn runningTotal + incTotal * multTotal;\r\n\t\t\t},\r\n\t\t\t0\r\n\t\t));\r\n\r\n\treturn {numCoinsToAdd, itemCountsForStats};\r\n};\r\n\r\nexport const isUpgradeAcquired = (acquiredUpgrades, upgradeToFind) => {\r\n\t// acquired upgrades will be a list of ids from gameState\r\n\treturn acquiredUpgrades.findIndex(upgradeId => upgradeId === upgradeToFind.id) >= 0;\r\n};\r\n\r\nconst isUpgradeAvailable = (acquiredUpgrades, upgradeToCheck) => {\r\n\tif (isUpgradeAcquired(acquiredUpgrades, upgradeToCheck)) {\r\n\t\t// if you already have it, it's not available...\r\n\t\treturn false;\r\n\t}\r\n\tif (upgradeToCheck.hasOwnProperty('upgradeDependencies')) {\r\n\t\treturn upgradeToCheck.upgradeDependencies.reduce((isVisible, dependencyId) => {\r\n\t\t\treturn isVisible && isUpgradeAcquired(acquiredUpgrades, {id: dependencyId});\r\n\t\t}, true);\r\n\t}\r\n\telse {\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\nexport const isPartTypeUnlocked = (acquiredUpgrades, type) => {\r\n\tif (!factoryPartUpgrades.hasOwnProperty(type)) {\r\n\t\treturn false;\r\n\t}\r\n\treturn isUpgradeAcquired(acquiredUpgrades, factoryPartUpgrades[type].unlock);\r\n};\r\n\r\nexport const getAcquiredFactoryLevelUpgradeIds = (factoryLevel) => {\r\n\treturn factoryUpgrades.slice(0, factoryLevel + 1).map(upgrade => upgrade.id);\r\n}\r\n\r\nexport const getAllAcquiredUpgrades = (gameState) => {\r\n\treturn [...gameState.upgrades, ...getAcquiredFactoryLevelUpgradeIds(gameState.factoryLevel)];\r\n}\r\n\r\nexport const getAvailableUpgradesForDisplay = (gameState) => {\r\n\t// add the factory level upgrades to the acquired upgrades list for checking\r\n\tconst allAcquiredUpgrades = getAllAcquiredUpgrades(gameState);\r\n\r\n\t// make an array -> [{categoryName: '', upgrades: [...]}, ...]\r\n\tconst upgradesToReturn = [];\r\n\t// 1. get the next factory level\r\n\tif ((gameState.factoryLevel + 1) < factoryUpgrades.length) {\r\n\t\tconst nextFactoryLevel = factoryUpgrades[gameState.factoryLevel + 1];\r\n\t\tif (isUpgradeAvailable(allAcquiredUpgrades, nextFactoryLevel)) {\r\n\t\t\tupgradesToReturn.push({\r\n\t\t\t\tcategoryName: 'Factory Level',\r\n\t\t\t\tupgrades: [factoryUpgrades[gameState.factoryLevel + 1]]\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// 2. go through factory part upgrades\r\n\t// for each key in the upgrades map (a part)\r\n\tfor (const [partType, {unlock, quantity, quality}] of Object.entries(factoryPartUpgrades)) {\r\n\t\tlet upgradesToAdd = [];\r\n\t\t// check if unlock is acquired\r\n\t\tif (isUpgradeAcquired(allAcquiredUpgrades, unlock)) {\r\n\t\t\t// if acquired, check quantity & quality upgrades for visibility\r\n\t\t\tupgradesToAdd = upgradesToAdd.concat(quantity.filter(upgrade => isUpgradeAvailable(allAcquiredUpgrades, upgrade)).map(upgrade => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: upgrade.id,\r\n\t\t\t\t\tcost: upgrade.cost,\r\n\t\t\t\t\tname: getQuantityName(partType, upgrade.level),\r\n\t\t\t\t\tdescription: getQuantityDesc(partType, unlock.incrementer, upgrade.level)\r\n\t\t\t\t};\r\n\t\t\t}));\r\n\t\t\tupgradesToAdd = upgradesToAdd.concat(quality.filter(upgrade => isUpgradeAvailable(allAcquiredUpgrades, upgrade)).map(upgrade => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: upgrade.id,\r\n\t\t\t\t\tcost: upgrade.cost,\r\n\t\t\t\t\tname: getQualityName(partType, upgrade.level),\r\n\t\t\t\t\tdescription: getQualityDesc(partType, unlock.multiplier, unlock.incrementer, upgrade.level)\r\n\t\t\t\t};\r\n\t\t\t}));\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// if not acquired, check if available\r\n\t\t\tif (isUpgradeAvailable(allAcquiredUpgrades, unlock)) {\r\n\t\t\t\t// if available, add to map\r\n\t\t\t\tupgradesToAdd.push({\r\n\t\t\t\t\tid: unlock.id,\r\n\t\t\t\t\tcost: unlock.cost,\r\n\t\t\t\t\tname: getBaseName(partType),\r\n\t\t\t\t\tdescription: getBaseDesc(partType, unlock.incrementer)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if any upgrades are being added\r\n\t\tif (upgradesToAdd.length > 0) {\r\n\t\t\t// add these all to the available upgrades map under the right part\r\n\t\t\t// add section metadata (just plural name) with list of upgrades -> categoryName: '', upgrades: [...]\r\n\t\t\tupgradesToReturn.push({\r\n\t\t\t\tcategoryName: getBaseName(partType),\r\n\t\t\t\tupgrades: upgradesToAdd\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn upgradesToReturn;\r\n};\r\n\r\nexport const formatUpgradesForDisplay = ({factoryLevel, upgrades: upgradeIdsToFormat}) => {\r\n\treturn [factoryUpgrades[factoryLevel], ...upgradeIdsToFormat.map(getPartUpgradeForDisplayById)];\r\n}\r\n\r\nexport const getFactoryDefault = () => getDefaultPartsUpgrades();\r\n","import {createContext, useReducer} from 'react';\r\nimport {\r\n\tfindUpgradeById,\r\n\tformatUpgradesForDisplay,\r\n\tgetAllAcquiredUpgrades,\r\n\tgetAvailableUpgradesForDisplay,\r\n\tgetFactoryDefault,\r\n\tgetSingleClickData, getWorkerIncrementData,\r\n\tisPartTypeUnlocked\r\n} from '../../services/upgrades/service';\r\nimport {factoryUpgrades, getBaseName, partTypes, types} from '../../services/upgrades/data';\r\nimport {findWorkerByType, getAvailableWorkersForDisplay, isWorkerTypeUnlocked} from '../../services/workers/service';\r\nimport {getWorkerName} from '../../services/workers/data';\r\n\r\n\r\nconst GameContext = createContext();\r\n\r\nconst actionTypes = {\r\n\tinit: 'INIT',\r\n\tclearGameState: 'CLEAR_GAME_STATE',\r\n\taddCoins: 'ADD_COINS',\r\n\tautoAddCoinsForWorkers: 'AUTO_ADD_COINS',\r\n\trecordClick: 'RECORD_CLICK',\r\n\tbuyUpgrade: 'BUY_UPGRADE',\r\n\tbuyWorker: 'BUY_WORKER'\r\n};\r\n\r\nconst saveState = ({loading: _, ...state}) => {\r\n\tconst stateToSave = {\r\n\t\t...state,\r\n\t\tversion: process.env.REACT_APP_VERSION\r\n\t\t// workers: Object.fromEntries(state.workers.map(worker => [worker.id, worker.count]))\r\n\t};\r\n\r\n\tlocalStorage.setItem('gameState', JSON.stringify(stateToSave));\r\n};\r\n\r\nconst defaultGameState = () => ({\r\n\tloading: true,\r\n\tfactoryLevel: 0,\r\n\ttotalClicks: 0,\r\n\ttotalCoins: 99,\r\n\tlifetimeCoins: 0,\r\n\tworkerLifetimeCoins: 0,\r\n\titemCountsForStats: Object.fromEntries(Object.values(partTypes).map(type => [type, 0])),\r\n\tworkers: {},\r\n\tupgrades: getFactoryDefault()\r\n});\r\n\r\nconst loadState = () => {\r\n\tconst loadedState = JSON.parse(localStorage.getItem('gameState'));\r\n\tlet shouldClearState = false;\r\n\tif (loadedState !== null && (!loadedState.hasOwnProperty('version') || loadedState.version < process.env.REACT_APP_VERSION)) {\r\n\t\talert('Your game version is out of date, and this game is in active development. I\\'m forcing you to start from scratch.');\r\n\t\tshouldClearState = true;\r\n\t}\r\n\r\n\tconst defaultState = defaultGameState();\r\n\r\n\tif (!shouldClearState && loadedState !== null) {\r\n\t\t// loadedState.workers = loadWorkers('factory', loadedState.workers || []);\r\n\t\treturn {...defaultState, ...loadedState};\r\n\t}\r\n\telse {\r\n\t\treturn defaultState;\r\n\t}\r\n};\r\n\r\nconst gameReducer = (state, action) => {\r\n\tlet newState, totalCoins;\r\n\tswitch (action.type) {\r\n\t\tcase actionTypes.init:\r\n\t\t\treturn {...state, loading: false};\r\n\t\tcase actionTypes.recordClick:\r\n\t\t\tlet totalClicks = state.totalClicks + 1;\r\n\t\t\tnewState = {...state, totalClicks};\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.addCoins:\r\n\t\t\tconst {numCoinsToAdd, itemCountsForStats} = getSingleClickData(state);\r\n\r\n\t\t\ttotalCoins = state.totalCoins + numCoinsToAdd;\r\n\r\n\t\t\tObject.keys(itemCountsForStats).forEach(type => {\r\n\t\t\t\titemCountsForStats[type] += state.itemCountsForStats[type] || 0;\r\n\t\t\t});\r\n\r\n\t\t\tnewState = {...state, totalCoins, lifetimeCoins: state.lifetimeCoins + numCoinsToAdd, itemCountsForStats};\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.autoAddCoinsForWorkers:\r\n\t\t\tlet totalCoinsToAdd = 0;\r\n\t\t\tconst totalItemCountsForStats = {};\r\n\r\n\t\t\t// iterate over the workers who are updating\r\n\t\t\taction.payload.workers.forEach(worker => {\r\n\t\t\t\tconst {numCoinsToAdd, itemCountsForStats} = getWorkerIncrementData(state, worker);\r\n\t\t\t\ttotalCoinsToAdd += numCoinsToAdd;\r\n\t\t\t\tObject.assign(totalItemCountsForStats, itemCountsForStats);\r\n\t\t\t});\r\n\r\n\t\t\tObject.keys(totalItemCountsForStats).forEach(type => {\r\n\t\t\t\ttotalItemCountsForStats[type] += state.itemCountsForStats[type] || 0;\r\n\t\t\t});\r\n\r\n\t\t\tnewState = {\r\n\t\t\t\t...state,\r\n\t\t\t\ttotalCoins: state.totalCoins + totalCoinsToAdd,\r\n\t\t\t\t// tally coins earned by this worker type for stats\r\n\t\t\t\tworkerLifetimeCoins: state.workerLifetimeCoins + totalCoinsToAdd,\r\n\t\t\t\titemCountsForStats: {...state.itemCountsForStats, ...totalItemCountsForStats}\r\n\t\t\t};\r\n\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.buyUpgrade:\r\n\t\t\tif (action.payload.type === types.factory) {\r\n\t\t\t\tconst nextLevel = factoryUpgrades[state.factoryLevel + 1];\r\n\t\t\t\tnewState = {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tfactoryLevel: state.factoryLevel + 1,\r\n\t\t\t\t\ttotalCoins: state.totalCoins - nextLevel.cost\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if you've already bought it, ignore this\r\n\t\t\t\tif (state.upgrades.findIndex(upgrade => upgrade.id === action.payload.id) >= 0) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t\tconst item = findUpgradeById(action.payload.id);\r\n\t\t\t\t// if you can't afford it, then also ignore it TODO: should i put cost in the payload of this action?\r\n\t\t\t\tif (state.totalCoins < item.cost) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t\tnewState = {...state, upgrades: [...state.upgrades, item.id], totalCoins: state.totalCoins - item.cost};\r\n\t\t\t}\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.buyWorker:\r\n\t\t\tconst updatedWorkers = {...state.workers};\r\n\t\t\tconst currentFactoryLevel = factoryUpgrades[state.factoryLevel];\r\n\t\t\tconst workerToBuy = findWorkerByType(action.payload.type);\r\n\r\n\t\t\t// if you've hit your max for this type, don't add one.\r\n\t\t\tif (currentFactoryLevel.workerMax <= updatedWorkers[action.payload.type]) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t// update the worker counts\r\n\t\t\tif (updatedWorkers.hasOwnProperty(action.payload.type)) {\r\n\t\t\t\tupdatedWorkers[action.payload.type]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tupdatedWorkers[action.payload.type] = 1;\r\n\t\t\t}\r\n\r\n\t\t\tnewState = {\r\n\t\t\t\t...state,\r\n\t\t\t\tworkers: updatedWorkers,\r\n\t\t\t\ttotalCoins: state.totalCoins - workerToBuy.cost,\r\n\t\t\t\titemCountsForStats: {\r\n\t\t\t\t\t...state.itemCountsForStats,\r\n\t\t\t\t\t[action.payload.type]: state.itemCountsForStats.hasOwnProperty(action.payload.type) ? state.itemCountsForStats[action.payload.type] + 1 : 1\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tcase actionTypes.clearGameState:\r\n\t\t\tnewState = defaultGameState();\r\n\t\t\tsaveState(newState);\r\n\t\t\treturn newState;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n\r\nconst handleAutoIncrement = (dispatch) => (workersWhoDelivered) => {\r\n\tdispatch({type: actionTypes.autoAddCoinsForWorkers, payload: {workers: workersWhoDelivered}});\r\n};\r\n\r\n\r\nconst intervalIds = [];\r\nconst updateIntervals = (gameState, incrementHandler) => {\r\n\t// first clean up all the existing intervals\r\n\tintervalIds.forEach(intervalId => window.clearInterval(intervalId));\r\n\tintervalIds.splice(0);\r\n\t// then go make new intervals for the items that already exist.\r\n\t// map the intervals by duration\r\n\tconst intervalMap = {};\r\n\tObject.entries(gameState.workers).forEach(([workerType, count]) => {\r\n\t\tconst worker = findWorkerByType(workerType);\r\n\r\n\t\tif (!intervalMap.hasOwnProperty(worker.interval)) {\r\n\t\t\tintervalMap[worker.interval] = [];\r\n\t\t}\r\n\t\tintervalMap[worker.interval].push(workerType);\r\n\t});\r\n\tfor (const [interval, workers] of Object.entries(intervalMap)) {\r\n\t\tif (!!interval) {\r\n\t\t\tintervalIds.push(\r\n\t\t\t\twindow.setInterval(() => {\r\n\t\t\t\t\t\tincrementHandler(workers);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tinterval * 1000\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nfunction GameWrapper ({children}) {\r\n\tconst [state, dispatch] = useReducer(gameReducer, {}, loadState);\r\n\r\n\tconst getStats = () => {\r\n\t\tconst statsThatMatter = [\r\n\t\t\t{\r\n\t\t\t\tname: 'Lifetime coins',\r\n\t\t\t\tcoins: state.lifetimeCoins\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Total clicks',\r\n\t\t\t\tcount: state.totalClicks\r\n\t\t\t}\r\n\t\t];\r\n\t\tconst acquiredUpgrades = getAllAcquiredUpgrades(state);\r\n\r\n\t\t// can see workers fl 1+\r\n\t\tif (state.factoryLevel > 0) {\r\n\t\t\tstatsThatMatter.push({\r\n\t\t\t\tname: 'Total coins earned by workers',\r\n\t\t\t\tcoins: state.workerLifetimeCoins\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tObject.entries(state.itemCountsForStats).forEach(([type, count]) => {\r\n\t\t\tif (isPartTypeUnlocked(acquiredUpgrades, type)) {\r\n\t\t\t\tstatsThatMatter.push({\r\n\t\t\t\t\tname: getBaseName(type) + ' sold',\r\n\t\t\t\t\tcount\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if (isWorkerTypeUnlocked(acquiredUpgrades, type)) {\r\n\t\t\t\tstatsThatMatter.push({\r\n\t\t\t\t\tname: getWorkerName(type),\r\n\t\t\t\t\tcount\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn statsThatMatter;\r\n\t};\r\n\r\n\tif (state.loading) {\r\n\t\tdispatch({type: actionTypes.init});\r\n\t\tupdateIntervals(state, handleAutoIncrement(dispatch));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<GameContext.Provider value={\r\n\t\t\t{\r\n\t\t\t\t...state,\r\n\t\t\t\tstats: getStats(),\r\n\t\t\t\trecordClick: () => dispatch({type: actionTypes.recordClick}),\r\n\t\t\t\taddCoins: () => dispatch({type: actionTypes.addCoins}),\r\n\t\t\t\tbuyUpgrade: (type, id) => dispatch({type: actionTypes.buyUpgrade, payload: {type, id}}),\r\n\t\t\t\tbuyWorker: (type, id) => {\r\n\t\t\t\t\tdispatch({type: actionTypes.buyWorker, payload: {type, id}});\r\n\t\t\t\t\tupdateIntervals(state, handleAutoIncrement(dispatch));\r\n\t\t\t\t},\r\n\t\t\t\tgetAvailableUpgrades: () => getAvailableUpgradesForDisplay(state),\r\n\t\t\t\tgetAcquiredUpgrades: () => formatUpgradesForDisplay(state),\r\n\t\t\t\tgetAvailableWorkers: () => getAvailableWorkersForDisplay(state),\r\n\t\t\t\tcanSeeWorkers: state.factoryLevel > 0,\r\n\t\t\t\tresetGame: () => dispatch({type: actionTypes.clearGameState}),\r\n\t\t\t\tcurrentMaxWorkers: factoryUpgrades[state.factoryLevel].workerMax\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</GameContext.Provider>\r\n\t);\r\n}\r\n\r\nexport {GameContext, GameWrapper};","import {ViewContext} from '../../App';\r\nimport {GameContext} from '../game/GameWrapper';\r\n\r\n\r\nexport default function Overview () {\r\n\treturn (\r\n\t\t<ViewContext.Consumer>\r\n\t\t\t{({showFactory, showKennel}) => (\r\n\t\t\t\t<GameContext.Consumer>\r\n\t\t\t\t\t{({resetGame}) => (\r\n\t\t\t\t\t\t<div className=\"overview\">\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>Factory</h2>\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t<li>Interesting Stats</li>\r\n\t\t\t\t\t\t\t\t\t<li>What are they</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<button onClick={showFactory}>Go to Factory</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>Tools</h2>\r\n\t\t\t\t\t\t\t\t<p>Hey. You probably want to do this if your game seems broken.</p>\r\n\t\t\t\t\t\t\t\t<button onClick={resetGame}>Reset Game</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>Pet Kennel</h2>\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t<li>Interesting Stats</li>\r\n\t\t\t\t\t\t\t\t\t<li>What are they</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<button onClick={showKennel}>Go to Pets</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</GameContext.Consumer>\r\n\t\t\t)}\r\n\t\t</ViewContext.Consumer>\r\n\t);\r\n}","export default function TwoPanel ({tabsContent, mainContent}) {\r\n\treturn (\r\n\t\t<div className=\"two-panel\">\r\n\t\t\t<div className=\"tabs-panel\">\r\n\t\t\t\t{tabsContent}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"main-panel\">\r\n\t\t\t\t{mainContent}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}","import {createContext, useState} from 'react';\r\n\r\n\r\nconst TabContext = createContext();\r\n\r\nfunction Tabs ({children, defaultTabKey}) {\r\n\tconst [currentTab, setCurrentTab] = useState(defaultTabKey);\r\n\treturn (\r\n\t\t<TabContext.Provider value={{\r\n\t\t\tcurrentTab,\r\n\t\t\tsetCurrentTab,\r\n\t\t\tisCurrentTab: (tabKey) => currentTab === tabKey\r\n\t\t}}>\r\n\t\t\t{children}\r\n\t\t</TabContext.Provider>\r\n\t);\r\n}\r\n\r\nfunction TabsContainer ({children}) {\r\n\treturn (\r\n\t\t<div className={'tabs-container'}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction Tab ({children, tabKey}) {\r\n\treturn (\r\n\t\t<TabContext.Consumer>\r\n\t\t\t{({isCurrentTab, setCurrentTab}) => (\r\n\t\t\t\t<div className={`tab${isCurrentTab(tabKey) ? ' current' : ''}`}\r\n\t\t\t\t\t role={'button'}\r\n\t\t\t\t\t onClick={isCurrentTab(tabKey) ? null : () => setCurrentTab(tabKey)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</TabContext.Consumer>\r\n\t);\r\n}\r\n\r\nfunction TabContent ({children, tabKey}) {\r\n\treturn (\r\n\t\t<TabContext.Consumer>\r\n\t\t\t{({isCurrentTab}) => isCurrentTab(tabKey) && (\r\n\t\t\t\t<div className={'tab-content'}>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</TabContext.Consumer>\r\n\t);\r\n}\r\n\r\nexport {TabsContainer, Tab, Tabs, TabContent};","import TwoPanel from '../TwoPanel';\r\nimport {Tab, TabContent, Tabs, TabsContainer} from '../Tabs';\r\nimport {GameContext} from '../game/GameWrapper';\r\n\r\n\r\nexport default function Factory () {\r\n\tconst renderAvailableUpgrades = (availableUpgrades, totalCoins, buyUpgrade) => {\r\n\t\tif (availableUpgrades.length === 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo available upgrades!\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn availableUpgrades.map(({categoryName, upgrades}) => {\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h3>{categoryName}</h3>\r\n\t\t\t\t\t{upgrades.map(upgrade => {\r\n\t\t\t\t\t\tlet extraClass = '';\r\n\t\t\t\t\t\tlet helperText = '';\r\n\t\t\t\t\t\tif (upgrade.purchased) {\r\n\t\t\t\t\t\t\textraClass = 'unavailable';\r\n\t\t\t\t\t\t\thelperText = 'You already have this!';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (upgrade.cost > totalCoins) {\r\n\t\t\t\t\t\t\textraClass = 'expensive';\r\n\t\t\t\t\t\t\thelperText = 'You can\\'t buy this yet.';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\thelperText = 'You can buy this!';\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={upgrade.id}\r\n\t\t\t\t\t\t\t\t className={`upgrade ${extraClass}`}\r\n\t\t\t\t\t\t\t\t role={'button'}\r\n\t\t\t\t\t\t\t\t onClick={() => buyUpgrade(upgrade.type, upgrade.id)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<div className={'upgrade-image'}>\r\n\t\t\t\t\t\t\t\t\t<img src={''} alt={`${upgrade.id}`} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<div className={'upgrade-title'}>\r\n\t\t\t\t\t\t\t\t\t\t<h4>{upgrade.name}</h4>\r\n\t\t\t\t\t\t\t\t\t\t{!upgrade.purchased && <span>COST: {upgrade.cost} C</span>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<p>{upgrade.description}</p>\r\n\t\t\t\t\t\t\t\t\t<small>{helperText}</small>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\tconst renderAvailableWorkers = (availableWorkers, totalCoins, buyWorker, currentMaxWorkers) => {\r\n\t\tif (availableWorkers.length === 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo available workers!\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn availableWorkers.map(worker => {\r\n\t\t\tlet extraClass = '';\r\n\t\t\tlet helperText = '';\r\n\t\t\tif (worker.count >= currentMaxWorkers) {\r\n\t\t\t\textraClass = 'unavailable';\r\n\t\t\t\thelperText = 'Upgrade your factory to buy more of these.';\r\n\t\t\t}\r\n\t\t\telse if (worker.cost > totalCoins) {\r\n\t\t\t\textraClass = 'expensive';\r\n\t\t\t\thelperText = 'You don\\'t have enough coins.';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thelperText = 'You can buy this!';\r\n\t\t\t}\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div key={worker.id}\r\n\t\t\t\t\t className={`upgrade ${extraClass}`}\r\n\t\t\t\t\t role={'button'}\r\n\t\t\t\t\t onClick={() => buyWorker(worker.type)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className={'upgrade-image'}>\r\n\t\t\t\t\t\t<img src={''} alt={`${worker.id}`} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div className={'upgrade-title'}>\r\n\t\t\t\t\t\t\t<h4>{worker.name} ({worker.count})</h4>\r\n\t\t\t\t\t\t\t<span>COST: {worker.cost} C</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p>{worker.description}</p>\r\n\t\t\t\t\t\t<small>{helperText}</small>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\tconst renderTabs = () => (\r\n\t\t<GameContext.Consumer>\r\n\t\t\t{({buyUpgrade, buyWorker, canSeeWorkers, getAvailableUpgrades, getAvailableWorkers, stats, totalCoins, currentMaxWorkers}) => {\r\n\t\t\t\tconst availableUpgrades = getAvailableUpgrades('factory');\r\n\t\t\t\tconst availableWorkers = getAvailableWorkers('factory');\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Tabs defaultTabKey={'upgrades'}>\r\n\t\t\t\t\t\t\t<TabsContainer>\r\n\t\t\t\t\t\t\t\t<Tab tabKey={'upgrades'}>Upgrades</Tab>\r\n\t\t\t\t\t\t\t\t{canSeeWorkers && <Tab tabKey={'workers'}>Workers</Tab>}\r\n\t\t\t\t\t\t\t\t<Tab tabKey={'stats'}>Stats</Tab>\r\n\t\t\t\t\t\t\t\t<Tab tabKey={'achievements'}>Achievements</Tab>\r\n\t\t\t\t\t\t\t</TabsContainer>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'upgrades'}>\r\n\t\t\t\t\t\t\t\t<span>{totalCoins} C</span>\r\n\t\t\t\t\t\t\t\t{renderAvailableUpgrades(availableUpgrades, totalCoins, buyUpgrade)}\r\n\t\t\t\t\t\t\t</TabContent>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'stats'}>\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t{stats.map(stat => <li>{stat.name}: {stat.coins >= 0 ? `${stat.coins} C` : stat.count}</li>)}\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</TabContent>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'achievements'}>Achivements go here</TabContent>\r\n\t\t\t\t\t\t\t<TabContent tabKey={'workers'}>\r\n\t\t\t\t\t\t\t\t{renderAvailableWorkers(availableWorkers, totalCoins, buyWorker, currentMaxWorkers)}\r\n\t\t\t\t\t\t\t</TabContent>\r\n\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t</>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</GameContext.Consumer>\r\n\t);\r\n\r\n\tconst renderMain = () => (\r\n\t\t<GameContext.Consumer>\r\n\t\t\t{({addCoins, recordClick, getAcquiredUpgrades}) => {\r\n\t\t\t\tconst upgrades = getAcquiredUpgrades();\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<button id={'factory'} onClick={() => {\r\n\t\t\t\t\t\t\trecordClick();\r\n\t\t\t\t\t\t\taddCoins();\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<img src={''} alt={'the factory - click to make parts'}/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h3>Upgrades you have:</h3>\r\n\t\t\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t\t\t{upgrades.map(upgrade => {\r\n\t\t\t\t\t\t\t\t\treturn <li key={upgrade.id}>{upgrade.name}</li>;\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</GameContext.Consumer>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<TwoPanel tabsContent={renderTabs()} mainContent={renderMain()}/>\r\n\t);\r\n}","import {ViewContext} from '../../App';\r\nimport TwoPanel from '../TwoPanel';\r\n\r\n\r\nexport default function Kennel () {\r\n\tconst renderTabs = () => <h2>Kennel</h2>;\r\n\r\n\tconst renderMain = () => \"it's exciting\";\r\n\r\n\treturn (\r\n\t\t<ViewContext.Consumer>\r\n\t\t\t{() => (\r\n\t\t\t\t<TwoPanel tabsContent={renderTabs()} mainContent={renderMain()} />\r\n\t\t\t)}\r\n\t\t</ViewContext.Consumer>\r\n\t);\r\n}","import {GameContext} from './game/GameWrapper';\r\nimport {ViewContext} from '../App';\r\n\r\n\r\nexport default function Header () {\r\n\treturn (\r\n\t\t<ViewContext.Consumer>\r\n\t\t\t{({isCurrentViewFactory, isCurrentViewKennel, isCurrentViewOverview, showFactory, showKennel, showOverview}) => (\r\n\t\t\t\t<GameContext.Consumer>\r\n\t\t\t\t\t{({totalCoins}) => (\r\n\t\t\t\t\t\t<header>\r\n\t\t\t\t\t\t\t<h1 role={\"button\"} onClick={showOverview}>Robot Pet Factory</h1>\r\n\t\t\t\t\t\t\t<nav>\r\n\t\t\t\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t\t\t\t<li className={isCurrentViewOverview() ? 'current' : ''}\r\n\t\t\t\t\t\t\t\t\t\trole={'button'}\r\n\t\t\t\t\t\t\t\t\t\tonClick={showOverview}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tOverview\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className={isCurrentViewFactory() ? 'current' : ''}\r\n\t\t\t\t\t\t\t\t\t\trole={'button'}\r\n\t\t\t\t\t\t\t\t\t\tonClick={showFactory}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tFactory\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className={isCurrentViewKennel() ? 'current' : ''}\r\n\t\t\t\t\t\t\t\t\t\trole={'button'}\r\n\t\t\t\t\t\t\t\t\t\tonClick={showKennel}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tKennel\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t\t</nav>\r\n\t\t\t\t\t\t\t<div>{totalCoins} C</div>\r\n\t\t\t\t\t\t</header>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</GameContext.Consumer>\r\n\t\t\t)}\r\n\t\t</ViewContext.Consumer>\r\n\t);\r\n}","import './App.scss';\r\nimport {createContext, useState} from 'react';\r\nimport Overview from './components/overview/Overview';\r\nimport Factory from './components/factory/Factory';\r\nimport Kennel from './components/kennel/Kennel';\r\nimport {GameWrapper} from './components/game/GameWrapper';\r\nimport Header from './components/Header';\r\n\r\n\r\nconst views = {\r\n\toverview: 'OVERVIEW',\r\n\tfactory: 'FACTORY',\r\n\tkennel: 'KENNEL'\r\n};\r\n\r\nexport const ViewContext = createContext();\r\n\r\nfunction App () {\r\n\tconst [currentView, setCurrentView] = useState(views.overview);\r\n\r\n\tlet viewContent;\r\n\r\n\tif (currentView === views.factory) {\r\n\t\tviewContent = <Factory/>;\r\n\t}\r\n\telse if (currentView === views.kennel) {\r\n\t\tviewContent = <Kennel/>;\r\n\t}\r\n\telse {  // views.overview\r\n\t\tviewContent = <Overview/>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ViewContext.Provider value={{\r\n\t\t\tshowOverview: () => setCurrentView(views.overview),\r\n\t\t\tshowFactory: () => setCurrentView(views.factory),\r\n\t\t\tshowKennel: () => setCurrentView(views.kennel),\r\n\t\t\tisCurrentViewOverview: () => currentView === views.overview,\r\n\t\t\tisCurrentViewFactory: () => currentView === views.factory,\r\n\t\t\tisCurrentViewKennel: () => currentView === views.kennel\r\n\t\t}}>\r\n\t\t\t<GameWrapper>\r\n\t\t\t\t<div className=\"dashboard\">\r\n\t\t\t\t\t<Header/>\r\n\t\t\t\t\t{viewContent}\r\n\t\t\t\t</div>\r\n\t\t\t</GameWrapper>\r\n\t\t</ViewContext.Provider>\r\n\t);\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n\t// StringMode is making the game reducer double worker count due todouble invocation of the reducer. this is likely\n\t// a big problem but i don't want to deal with it.\n\t// <React.StrictMode>\n\t<App/>,\n\t// </React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}